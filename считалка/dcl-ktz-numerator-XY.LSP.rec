
(defun sh-num (
	       /
	       dcl_id
	       pnatt
	       razr
	       lit
	       z
	       sort
	       sort1
	       sort2
	       lst
	       )
  (if (< (setq dcl_id (load_dialog "D:\\LISP WORKIG\\считалка\\dcl-ktz-numerator.DCL"))
	 0)
    (exit)
    );if

  
  (if (not (new_dialog "dcl_ktz_numerator" dcl_id))
    (exit))



    (action_tile "accept"
      (strcat
	"(setq	pnatt	(atoi (get_tile \"pnatt\"))
		z	(atoi (get_tile \"z\"))
		razr	(atoi (get_tile \"razr\"))
		lit	(get_tile \"lit\")
		sort	(list
			(atoi (get_tile \"a1\"))
			(atoi (get_tile \"b1\"))
			(atoi (get_tile \"c1\"))
			)
		       )"
	"(setq lst (list pnatt z razr lit sort))"
	"(done_dialog)"
	)
    ); action-tile accept


  (start_dialog)
  (unload_dialog dcl_id)


(numerator lst)

  ;lst
  
);defun 






;;lst = '(1 3 nil "y" (1 1 1))
(defun numerator (lst
		  /
		  n_att
		  z
		  razr
		  lit
		  sort
		  ss
		  i
		  en-lst
		  entg
		  ent
		  cmd1
		  cmd2
		  cmd+-1
		  cmd+-2

		  txtsz					;;; наибольша€ высотаа текста
		  tsz					;;; выстоа текущего текста
		  pXY
		  doc
		  )
  (vl-load-com)
  (setq doc (vla-get-activedocument (vlax-get-acad-object)))
  (vla-startundomark doc)
  
  (acet-error-init
    (list (list "cmdecho" 0
               "expert" nil
        );list
        T
  );list
 );acet-error-init



  (setq	ss 	(ssget)
	i	0
	n_att	(car lst)	lst	(cdr lst)
	z	(car lst)	lst	(cdr lst)
	razr	(car lst)	lst	(cdr lst)
	lit	(car lst)	sort	(cadr lst)
	)
  (setq txtsz 0.1)
  (princ ss)
  (princ n_att)
  (princ "\n")
  (princ z)
  (princ "\n")
  (princ razr)
  (princ "\n")
  (princ lit)
  (princ "\n")
  (mapcar 'princ sort)
  (princ "\n")

  (if (= 1 (car sort))
    (progn (setq cmd1 '(car))   (setq cmd2 '(cadr)))
    (progn (setq cmd1 '(cadr))   (setq cmd2 '(car)))
    );if



;;;  ;;;  < - по возрастанию - от меньшего к большему
;;;  (if (= 1 (cadr sort))
;;;    (progn
;;;      (setq cmd+-1 '(<))
;;;      );progn
;;;    (progn
;;;      (setq cmd+-1 '(>))
;;;    );progn
;;;    );if



  (if (= 1 (caddr sort))
    (progn
      (setq cmd+-2 '(<))
      (if (= 1 (cadr sort))
	(setq cmd+-1 '(>))
	(setq cmd+-1 '(<))
	)
      );progn
    (progn
      (setq cmd+-2 '(>))
      (if (= 1 (cadr sort))
	(setq cmd+-1 '(<))
	(setq cmd+-1 '(>))
	)
      
    );progn
    );if

  
;;;  (if (= 1 (caddr sort))
;;;    (setq cmd+-2 '(<))
;;;    (setq cmd+-2 '(>))
;;;    );if


  

;;; создаем список с именами объектов и параметром дл€ сортировки
  
  (repeat (sslength ss)
    (if (not (equal
	       '(0 0 0)
	       (cdr (assoc 11 (entget (ssname ss i))))
	       ))
      (setq pXY 11)
      (setq pXY 10)
      )
    (setq en-lst
	   (append en-lst
		   (list (list (setq ent (ssname ss i))
			       (list (car (setq ent (cdr (assoc pXY (entget ent))))) (cadr ent))
			       )
		   )
	   );append
    );setq
    
    (setq tsz (cdr (assoc 40 (entget (ssname ss i)))))
    (if (> tsz txtsz)
      (setq txtsz tsz)
      )

    (setq i (1+ i))
  );repeat   expt
  
  (setq i 0)


  ;;(eval (append cmd+-1 '((eval (append cmd2 '((nth 1 en-lst)))))))

;;;************************************************************
  ;;; распечатка содержимого текста из en-lst, отладка
;;;     (mapcar '(lambda (x) (princ (strcat (cdr (assoc 1 (entget(car x)))) "\n")))    en-lst) 

  ;;;************************************************************

;;;************************************************************
;;;  (setq	en-lst (vl-sort en-lst
;;;			  '(lambda (a b)
;;;			     (eval (append cmd+-2 '(
;;;						    (eval (append cmd2 '((cadr a))))
;;;						    (eval (append cmd2 '((cadr b))))
;;;						    )
;;;					   )
;;;				   );eval
;;;			     )
;;;			)
;;;	)
;;;************************************************************
;;;  (setq	en-lst (vl-sort en-lst
;;;			  '(lambda (a b)
;;;			     (cond
;;;			       (
;;;				(> txtsz
;;;				   (- (eval (append cmd2 '((cadr a))))
;;;				      (eval (append cmd2 '((cadr b))))
;;;				      );-
;;;				   );>
;;;			       ;;; то сортируем по ’
;;;			       (progn
;;;				(eval (append cmd+-1 '(
;;;						       (eval (append cmd1 '((cadr a))))
;;;						       (eval (append cmd1 '((cadr b))))
;;;						       )
;;;					      )
;;;				      );eval
;;;				);progn
;;;				);1
;;;			       ;2
;;;			       (
;;;			       (progn
;;;			       (eval (append cmd+-2 '(
;;;						      (eval (append cmd2 '((cadr a))))
;;;						      (eval (append cmd2 '((cadr b))))
;;;						      )
;;;					     )
;;;				);eval
;;;			       );progn
;;;				T);2
;;;
;;;			     );cond
;;;			     );lambda
;;;			)
;;;	)
;;;

  
;;;************************************************************
  (setq	en-lst (vl-sort en-lst
			  '(lambda (a b)
			     (eval (append cmd+-1 '((-
						    (eval (append cmd1 '((cadr a))))
						    (eval (append cmd1 '((cadr b))))
						    ) txtsz)
					   )
				   );eval
			     )
			)
	)


  (setq	en-lst (vl-sort en-lst
			  '(lambda (a b)
			     (eval (append cmd+-2 '((-
						    (eval (append cmd2 '((cadr a))))
						    (eval (append cmd2 '((cadr b))))
						    ) txtsz) 
					   )
				   );eval
			     )
			)
	)

  
  (foreach ent en-lst
    (setq ent (car ent))
    (if (= "INSERT"
	   (cdr(assoc 0 (entget ent))))
      (repeat n_att (setq ent (entnext ent)))
      );if
    (setq entg (entget ent))
    (setq entg (subst (cons 1 (strcat lit (itoa (+ i z))))
			   (assoc 1 entg)
			   entg
		    )
    )


    (entmod entg)
    (entupd (cdr (assoc -1 entg)))
    (setq i (1+ i))
  );foreach

    (vla-endundomark doc)
(princ)
);defun